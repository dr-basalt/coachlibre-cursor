# Script de test de l'acc√®s externe CoachLibre
Write-Host "üß™ Test de l'acc√®s externe CoachLibre..." -ForegroundColor Green

# Configuration
$DOMAIN = "coachlibre.infra.ori3com.cloud"
$NAMESPACE = "coachlibre"

# 1. V√©rification de l'√©tat du cluster
Write-Host "üìã V√©rification de l'√©tat du cluster..." -ForegroundColor Yellow
kubectl get pods -n $NAMESPACE
kubectl get ingress -n $NAMESPACE
kubectl get services -n $NAMESPACE

# 2. Test de r√©solution DNS
Write-Host "üåê Test de r√©solution DNS..." -ForegroundColor Yellow
try {
    $dnsResult = Resolve-DnsName -Name $DOMAIN -Type A -ErrorAction Stop
    Write-Host "‚úÖ DNS r√©solu: $($dnsResult.IPAddress)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur de r√©solution DNS: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "‚ö†Ô∏è V√©rifiez la configuration Cloudflare" -ForegroundColor Yellow
}

# 3. Test de connectivit√© HTTP
Write-Host "üîó Test de connectivit√© HTTP..." -ForegroundColor Yellow
try {
    $httpResponse = Invoke-WebRequest -Uri "http://$DOMAIN" -TimeoutSec 10 -ErrorAction Stop
    Write-Host "‚úÖ HTTP accessible (Status: $($httpResponse.StatusCode))" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur HTTP: $($_.Exception.Message)" -ForegroundColor Red
}

# 4. Test de connectivit√© HTTPS
Write-Host "üîí Test de connectivit√© HTTPS..." -ForegroundColor Yellow
try {
    $httpsResponse = Invoke-WebRequest -Uri "https://$DOMAIN" -TimeoutSec 10 -ErrorAction Stop
    Write-Host "‚úÖ HTTPS accessible (Status: $($httpsResponse.StatusCode))" -ForegroundColor Green
    
    # V√©rifier le certificat
    $cert = [System.Net.ServicePointManager]::ServerCertificateValidationCallback
    Write-Host "‚úÖ Certificat SSL valide" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur HTTPS: $($_.Exception.Message)" -ForegroundColor Red
}

# 5. Test du contenu de la page
Write-Host "üìÑ Test du contenu de la page..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "https://$DOMAIN" -TimeoutSec 10
    if ($response.Content -like "*CoachLibre*") {
        Write-Host "‚úÖ Contenu de la page correct" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è Contenu de la page inattendu" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå Erreur lors du test du contenu: $($_.Exception.Message)" -ForegroundColor Red
}

# 6. Test des logs
Write-Host "üìä V√©rification des logs..." -ForegroundColor Yellow
try {
    $logs = kubectl logs -n $NAMESPACE -l app=coachlibre-frontend --tail=10
    Write-Host "‚úÖ Logs r√©cup√©r√©s" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Erreur lors de la r√©cup√©ration des logs: $($_.Exception.Message)" -ForegroundColor Yellow
}

# 7. Test de performance
Write-Host "‚ö° Test de performance..." -ForegroundColor Yellow
try {
    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
    $response = Invoke-WebRequest -Uri "https://$DOMAIN" -TimeoutSec 30
    $stopwatch.Stop()
    $responseTime = $stopwatch.ElapsedMilliseconds
    Write-Host "‚úÖ Temps de r√©ponse: ${responseTime}ms" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors du test de performance: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "üéâ Tests termin√©s!" -ForegroundColor Green
Write-Host "üåê URL de test: https://$DOMAIN" -ForegroundColor Cyan
Write-Host "üìù Pour surveiller les logs: kubectl logs -f -n $NAMESPACE -l app=coachlibre-frontend" -ForegroundColor Yellow
