#!/bin/bash

# üöÄ Script de D√©ploiement Simplifi√© CoachLibre
# Auteur: CoachLibre Team
# Version: 1.0.0

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rification des pr√©requis
check_prerequisites() {
    print_status "V√©rification des pr√©requis..."
    
    # V√©rifier Docker
    if ! command -v docker &> /dev/null; then
        print_error "Docker n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose n'est pas install√©"
        exit 1
    fi
    
    print_success "Pr√©requis v√©rifi√©s"
}

# Build des images Docker
build_images() {
    print_status "Build des images Docker..."
    
    # Build API
    print_status "Building image API..."
    docker build -t coachlibre/api:latest ./apps/api
    
    # Build Frontend
    print_status "Building image Frontend..."
    docker build -t coachlibre/frontend:latest ./apps/frontend
    
    print_success "Images Docker build√©es"
}

# D√©ploiement avec Docker Compose
deploy_docker() {
    print_status "D√©ploiement avec Docker Compose..."
    
    # Arr√™ter les conteneurs existants
    docker-compose down 2>/dev/null || true
    
    # D√©marrer les services
    docker-compose up -d
    
    print_success "D√©ploiement Docker termin√©"
}

# V√©rification du d√©ploiement
verify_deployment() {
    print_status "V√©rification du d√©ploiement..."
    
    # Attendre que les services soient pr√™ts
    sleep 10
    
    # V√©rifier les conteneurs
    if docker-compose ps | grep -q "Up"; then
        print_success "‚úÖ Conteneurs d√©marr√©s"
    else
        print_error "‚ùå Conteneurs non d√©marr√©s"
        return 1
    fi
    
    # Tester l'API
    if curl -f http://localhost:8000/health >/dev/null 2>&1; then
        print_success "‚úÖ API accessible"
    else
        print_warning "‚ö†Ô∏è API non accessible (peut prendre du temps √† d√©marrer)"
    fi
    
    # Tester le frontend
    if curl -f http://localhost:3000 >/dev/null 2>&1; then
        print_success "‚úÖ Frontend accessible"
    else
        print_warning "‚ö†Ô∏è Frontend non accessible (peut prendre du temps √† d√©marrer)"
    fi
    
    return 0
}

# Affichage des informations
show_info() {
    echo ""
    print_success "üéâ D√©ploiement termin√© !"
    echo ""
    echo "üìä Services disponibles :"
    echo "- Frontend : http://$(hostname -I | awk '{print $1}'):3000"
    echo "- API : http://$(hostname -I | awk '{print $1}'):8000"
    echo "- PostgreSQL : localhost:5432"
    echo "- Redis : localhost:6379"
    echo "- Qdrant : http://$(hostname -I | awk '{print $1}'):6333"
    echo ""
    echo "üîß Commandes utiles :"
    echo "- Voir les logs : docker-compose logs -f"
    echo "- Arr√™ter : docker-compose down"
    echo "- Red√©marrer : docker-compose restart"
    echo "- Statut : docker-compose ps"
    echo ""
}

# Fonction principale
main() {
    echo "üöÄ D√©ploiement Simplifi√© CoachLibre"
    echo "==================================="
    echo ""
    
    # V√©rifier qu'on est dans le bon r√©pertoire
    if [ ! -f "docker-compose.yml" ]; then
        print_error "Ce script doit √™tre ex√©cut√© depuis la racine du projet CoachLibre"
        exit 1
    fi
    
    # V√©rification des pr√©requis
    check_prerequisites
    
    # Build des images
    build_images
    
    # D√©ploiement
    deploy_docker
    
    # V√©rification
    if verify_deployment; then
        show_info
    else
        print_warning "‚ö†Ô∏è D√©ploiement termin√© avec des avertissements"
        show_info
    fi
}

# Ex√©cuter le script principal
main "$@" 